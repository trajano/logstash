input {
   file {
     type => "transmission-daemon"
     path => [ "/var/log/upstart/transmission-daemon.log*" ]
     exclude => "*.gz"
   }

}
filter {
  if [type] == "transmission-daemon" {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => [ "message", "\[%{TIME:timestamp}\] %{GREEDYDATA:message} \(%{DATA:source}:%{INT:lineNumber}\)" ]
      overwrite => [ "message" ]
    }
    if "_grokparsefailure" in [tags] {
      drop { }
    }
    grok {
      match => [
        "message", "%{GREEDYDATA:file} State changed from \"%{DATA:oldstate}\" to \"%{DATA:newState}\"",
        "message", "%{GREEDYDATA:file} Queued for verification",
        "message", "%{GREEDYDATA:file} Verifying torrent",
        "message", "%{GREEDYDATA:file} Starting IPv4 DHT announce \(%{DATA:state}, %{INT:nodes} nodes\)",
        "message", "%{GREEDYDATA:file} IPv4 DHT announce done",
        "message", "Saved \"%{GREEDYDATA:file}\"",
        "message", "Blocklist \"%{DATA:file}\" contains %{INT:count} entries",      
        "message", "%{GREEDYDATA:file} Removing torrent",
        "message", "%{GREEDYDATA:file} Pausing",
        "message", "%{GREEDYDATA:file} Retrying %{WORD:operation} in %{INT:retrySeconds} seconds.",
        "message", "%{GREEDYDATA:file} Piece %{INT:piece}, which was just downloaded, failed its checksum test",
        "message", "%{GREEDYDATA:file} ((?<errorGroup>[^:]+): )?Tracker gave HTTP response code %{INT:errorCode} \(%{DATA:errorMessage}\)"
      ]
      add_tag => [ "messageparsed" ]
      tag_on_failure => [ ]
    }
    ruby {
      code => "event['timestamp'] = Date.today.to_s + ' ' + event['timestamp']"
    }
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
      timezone => "America/Toronto"
      remove_field => [ "timestamp" ]
     }
  }
}
